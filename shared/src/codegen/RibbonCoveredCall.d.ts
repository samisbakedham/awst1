/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RibbonCoveredCallInterface extends ethers.utils.Interface {
  functions: {
    "MINIMUM_SUPPLY()": FunctionFragment;
    "SWAP_CONTRACT()": FunctionFragment;
    "USDC()": FunctionFragment;
    "WETH()": FunctionFragment;
    "accountVaultBalance(address)": FunctionFragment;
    "adapter()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "assetAmountToShares(uint256)": FunctionFragment;
    "assetBalance()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cap()": FunctionFragment;
    "closeShort()": FunctionFragment;
    "commitAndClose(tuple)": FunctionFragment;
    "currentOption()": FunctionFragment;
    "currentOptionExpiry()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delay()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositETH()": FunctionFragment;
    "emergencyWithdrawFromShort()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,uint256,string,string)": FunctionFragment;
    "instantWithdrawalFee()": FunctionFragment;
    "isPut()": FunctionFragment;
    "lockedAmount()": FunctionFragment;
    "lockedRatio()": FunctionFragment;
    "manager()": FunctionFragment;
    "maxWithdrawAmount(address)": FunctionFragment;
    "maxWithdrawableShares()": FunctionFragment;
    "migrate()": FunctionFragment;
    "name()": FunctionFragment;
    "nextOption()": FunctionFragment;
    "nextOptionReadyAt()": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replacementVault()": FunctionFragment;
    "rollToNextOption()": FunctionFragment;
    "sellOptions(tuple)": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "setWithdrawalFee(uint256)": FunctionFragment;
    "sunset(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlying()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAmountWithShares(uint256)": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
    "withdrawToV1Vault(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MINIMUM_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWAP_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountVaultBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "adapter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetAmountToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeShort",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitAndClose",
    values: [
      {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
        paymentToken: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOptionExpiry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawFromShort",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "instantWithdrawalFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawableShares",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOptionReadyAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replacementVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollToNextOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellOptions",
    values: [
      {
        nonce: BigNumberish;
        expiry: BigNumberish;
        signer: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        sender: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        affiliate: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        signature: {
          signatory: string;
          validator: string;
          version: BytesLike;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sunset", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAmountWithShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToV1Vault",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMUM_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetAmountToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeShort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitAndClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOptionExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawFromShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "instantWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawableShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextOptionReadyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replacementVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollToNextOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sunset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAmountWithShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToV1Vault",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CapSet(uint256,uint256,address)": EventFragment;
    "CloseShort(address,uint256,address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "ManagerChanged(address,address)": EventFragment;
    "Migrate(address,address,uint256,uint256)": EventFragment;
    "OpenShort(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VaultSunset(address)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawToV1Vault(address,uint256,address,uint256)": EventFragment;
    "WithdrawalFeeSet(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultSunset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawToV1Vault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFeeSet"): EventFragment;
}

export class RibbonCoveredCall extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RibbonCoveredCallInterface;

  functions: {
    MINIMUM_SUPPLY(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "MINIMUM_SUPPLY()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    SWAP_CONTRACT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "SWAP_CONTRACT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    USDC(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "USDC()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WETH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "accountVaultBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    adapter(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "adapter()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "asset()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    assetAmountToShares(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "assetAmountToShares(uint256)"(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    assetBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "assetBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cap(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "cap()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    closeShort(overrides?: Overrides): Promise<ContractTransaction>;

    "closeShort()"(overrides?: Overrides): Promise<ContractTransaction>;

    commitAndClose(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
        paymentToken: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitAndClose((address,address,address,uint256,uint256,uint8,address))"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
        paymentToken: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentOption(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "currentOption()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    currentOptionExpiry(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "currentOptionExpiry()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delay(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "delay()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositETH(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "depositETH()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    emergencyWithdrawFromShort(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdrawFromShort()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "feeRecipient()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,string,string)"(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    instantWithdrawalFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "instantWithdrawalFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isPut(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isPut()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    lockedAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lockedRatio(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockedRatio()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    manager(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "manager()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    maxWithdrawAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxWithdrawAmount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxWithdrawableShares(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxWithdrawableShares()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    migrate(overrides?: Overrides): Promise<ContractTransaction>;

    "migrate()"(overrides?: Overrides): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    nextOption(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "nextOption()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nextOptionReadyAt()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    registry(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "registry()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    replacementVault(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "replacementVault()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rollToNextOption(overrides?: Overrides): Promise<ContractTransaction>;

    "rollToNextOption()"(overrides?: Overrides): Promise<ContractTransaction>;

    sellOptions(
      order: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        signer: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        sender: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        affiliate: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        signature: {
          signatory: string;
          validator: string;
          version: BytesLike;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellOptions((uint256,uint256,(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(address,address,bytes1,uint8,bytes32,bytes32)))"(
      order: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        signer: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        sender: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        affiliate: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        signature: {
          signatory: string;
          validator: string;
          version: BytesLike;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeRecipient(address)"(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setManager(
      newManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setManager(address)"(
      newManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      newWithdrawalFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWithdrawalFee(uint256)"(
      newWithdrawalFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sunset(
      upgradeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sunset(address)"(
      upgradeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "underlying()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    withdraw(
      share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAmountWithShares(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountAfterFee: BigNumber;
      feeAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "withdrawAmountWithShares(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountAfterFee: BigNumber;
      feeAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    withdrawETH(
      share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawETH(uint256)"(
      share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawToV1Vault(
      share: BigNumberish,
      vault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToV1Vault(uint256,address)"(
      share: BigNumberish,
      vault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MINIMUM_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  "MINIMUM_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

  SWAP_CONTRACT(overrides?: CallOverrides): Promise<string>;

  "SWAP_CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  "USDC()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  accountVaultBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "accountVaultBalance(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  adapter(overrides?: CallOverrides): Promise<string>;

  "adapter()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  "asset()"(overrides?: CallOverrides): Promise<string>;

  assetAmountToShares(
    assetAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "assetAmountToShares(uint256)"(
    assetAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "assetBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  "cap()"(overrides?: CallOverrides): Promise<BigNumber>;

  closeShort(overrides?: Overrides): Promise<ContractTransaction>;

  "closeShort()"(overrides?: Overrides): Promise<ContractTransaction>;

  commitAndClose(
    optionTerms: {
      underlying: string;
      strikeAsset: string;
      collateralAsset: string;
      expiry: BigNumberish;
      strikePrice: BigNumberish;
      optionType: BigNumberish;
      paymentToken: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitAndClose((address,address,address,uint256,uint256,uint8,address))"(
    optionTerms: {
      underlying: string;
      strikeAsset: string;
      collateralAsset: string;
      expiry: BigNumberish;
      strikePrice: BigNumberish;
      optionType: BigNumberish;
      paymentToken: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentOption(overrides?: CallOverrides): Promise<string>;

  "currentOption()"(overrides?: CallOverrides): Promise<string>;

  currentOptionExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  "currentOptionExpiry()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  "delay()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositETH(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "depositETH()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  emergencyWithdrawFromShort(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdrawFromShort()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  "feeRecipient()"(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _feeRecipient: string,
    _initCap: BigNumberish,
    _tokenName: string,
    _tokenSymbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,string,string)"(
    _owner: string,
    _feeRecipient: string,
    _initCap: BigNumberish,
    _tokenName: string,
    _tokenSymbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  instantWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

  "instantWithdrawalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  isPut(overrides?: CallOverrides): Promise<boolean>;

  "isPut()"(overrides?: CallOverrides): Promise<boolean>;

  lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  manager(overrides?: CallOverrides): Promise<string>;

  "manager()"(overrides?: CallOverrides): Promise<string>;

  maxWithdrawAmount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maxWithdrawAmount(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxWithdrawableShares(overrides?: CallOverrides): Promise<BigNumber>;

  "maxWithdrawableShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  migrate(overrides?: Overrides): Promise<ContractTransaction>;

  "migrate()"(overrides?: Overrides): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nextOption(overrides?: CallOverrides): Promise<string>;

  "nextOption()"(overrides?: CallOverrides): Promise<string>;

  nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

  "nextOptionReadyAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  replacementVault(overrides?: CallOverrides): Promise<string>;

  "replacementVault()"(overrides?: CallOverrides): Promise<string>;

  rollToNextOption(overrides?: Overrides): Promise<ContractTransaction>;

  "rollToNextOption()"(overrides?: Overrides): Promise<ContractTransaction>;

  sellOptions(
    order: {
      nonce: BigNumberish;
      expiry: BigNumberish;
      signer: {
        kind: BytesLike;
        wallet: string;
        token: string;
        amount: BigNumberish;
        id: BigNumberish;
      };
      sender: {
        kind: BytesLike;
        wallet: string;
        token: string;
        amount: BigNumberish;
        id: BigNumberish;
      };
      affiliate: {
        kind: BytesLike;
        wallet: string;
        token: string;
        amount: BigNumberish;
        id: BigNumberish;
      };
      signature: {
        signatory: string;
        validator: string;
        version: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellOptions((uint256,uint256,(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(address,address,bytes1,uint8,bytes32,bytes32)))"(
    order: {
      nonce: BigNumberish;
      expiry: BigNumberish;
      signer: {
        kind: BytesLike;
        wallet: string;
        token: string;
        amount: BigNumberish;
        id: BigNumberish;
      };
      sender: {
        kind: BytesLike;
        wallet: string;
        token: string;
        amount: BigNumberish;
        id: BigNumberish;
      };
      affiliate: {
        kind: BytesLike;
        wallet: string;
        token: string;
        amount: BigNumberish;
        id: BigNumberish;
      };
      signature: {
        signatory: string;
        validator: string;
        version: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCap(
    newCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCap(uint256)"(
    newCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    newFeeRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeRecipient(address)"(
    newFeeRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setManager(
    newManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setManager(address)"(
    newManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    newWithdrawalFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWithdrawalFee(uint256)"(
    newWithdrawalFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sunset(
    upgradeTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sunset(address)"(
    upgradeTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAmountWithShares(
    share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amountAfterFee: BigNumber;
    feeAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "withdrawAmountWithShares(uint256)"(
    share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amountAfterFee: BigNumber;
    feeAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  withdrawETH(
    share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawETH(uint256)"(
    share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawToV1Vault(
    share: BigNumberish,
    vault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToV1Vault(uint256,address)"(
    share: BigNumberish,
    vault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MINIMUM_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    SWAP_CONTRACT(overrides?: CallOverrides): Promise<string>;

    "SWAP_CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    "USDC()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountVaultBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adapter(overrides?: CallOverrides): Promise<string>;

    "adapter()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    "asset()"(overrides?: CallOverrides): Promise<string>;

    assetAmountToShares(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assetAmountToShares(uint256)"(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "assetBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    "cap()"(overrides?: CallOverrides): Promise<BigNumber>;

    closeShort(overrides?: CallOverrides): Promise<void>;

    "closeShort()"(overrides?: CallOverrides): Promise<void>;

    commitAndClose(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
        paymentToken: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "commitAndClose((address,address,address,uint256,uint256,uint8,address))"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
        paymentToken: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    currentOption(overrides?: CallOverrides): Promise<string>;

    "currentOption()"(overrides?: CallOverrides): Promise<string>;

    currentOptionExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    "currentOptionExpiry()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    "delay()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    "depositETH()"(overrides?: CallOverrides): Promise<void>;

    emergencyWithdrawFromShort(overrides?: CallOverrides): Promise<void>;

    "emergencyWithdrawFromShort()"(overrides?: CallOverrides): Promise<void>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    "feeRecipient()"(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,string,string)"(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    instantWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "instantWithdrawalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPut(overrides?: CallOverrides): Promise<boolean>;

    "isPut()"(overrides?: CallOverrides): Promise<boolean>;

    lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<string>;

    "manager()"(overrides?: CallOverrides): Promise<string>;

    maxWithdrawAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxWithdrawAmount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdrawableShares(overrides?: CallOverrides): Promise<BigNumber>;

    "maxWithdrawableShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(overrides?: CallOverrides): Promise<void>;

    "migrate()"(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nextOption(overrides?: CallOverrides): Promise<string>;

    "nextOption()"(overrides?: CallOverrides): Promise<string>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

    "nextOptionReadyAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    replacementVault(overrides?: CallOverrides): Promise<string>;

    "replacementVault()"(overrides?: CallOverrides): Promise<string>;

    rollToNextOption(overrides?: CallOverrides): Promise<void>;

    "rollToNextOption()"(overrides?: CallOverrides): Promise<void>;

    sellOptions(
      order: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        signer: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        sender: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        affiliate: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        signature: {
          signatory: string;
          validator: string;
          version: BytesLike;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "sellOptions((uint256,uint256,(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(address,address,bytes1,uint8,bytes32,bytes32)))"(
      order: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        signer: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        sender: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        affiliate: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        signature: {
          signatory: string;
          validator: string;
          version: BytesLike;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(newCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeRecipient(address)"(
      newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(newManager: string, overrides?: CallOverrides): Promise<void>;

    "setManager(address)"(
      newManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFee(
      newWithdrawalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWithdrawalFee(uint256)"(
      newWithdrawalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sunset(upgradeTo: string, overrides?: CallOverrides): Promise<void>;

    "sunset(address)"(
      upgradeTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    withdraw(share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAmountWithShares(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountAfterFee: BigNumber;
      feeAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "withdrawAmountWithShares(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountAfterFee: BigNumber;
      feeAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    withdrawETH(share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdrawETH(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToV1Vault(
      share: BigNumberish,
      vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToV1Vault(uint256,address)"(
      share: BigNumberish,
      vault: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    CapSet(oldCap: null, newCap: null, manager: null): EventFilter;

    CloseShort(
      options: string | null,
      withdrawAmount: null,
      manager: null
    ): EventFilter;

    Deposit(account: string | null, amount: null, share: null): EventFilter;

    ManagerChanged(oldManager: null, newManager: null): EventFilter;

    Migrate(
      account: null,
      replacement: null,
      shares: null,
      amount: null
    ): EventFilter;

    OpenShort(
      options: string | null,
      depositAmount: null,
      manager: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    VaultSunset(replacement: null): EventFilter;

    Withdraw(
      account: string | null,
      amount: null,
      share: null,
      fee: null
    ): EventFilter;

    WithdrawToV1Vault(
      account: null,
      oldShares: null,
      to: null,
      newShares: null
    ): EventFilter;

    WithdrawalFeeSet(oldFee: null, newFee: null): EventFilter;
  };

  estimateGas: {
    MINIMUM_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    SWAP_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "SWAP_CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    "USDC()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountVaultBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adapter(overrides?: CallOverrides): Promise<BigNumber>;

    "adapter()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    "asset()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetAmountToShares(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assetAmountToShares(uint256)"(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "assetBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    "cap()"(overrides?: CallOverrides): Promise<BigNumber>;

    closeShort(overrides?: Overrides): Promise<BigNumber>;

    "closeShort()"(overrides?: Overrides): Promise<BigNumber>;

    commitAndClose(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
        paymentToken: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitAndClose((address,address,address,uint256,uint256,uint8,address))"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
        paymentToken: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentOption(overrides?: CallOverrides): Promise<BigNumber>;

    "currentOption()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentOptionExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    "currentOptionExpiry()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    "delay()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositETH(overrides?: PayableOverrides): Promise<BigNumber>;

    "depositETH()"(overrides?: PayableOverrides): Promise<BigNumber>;

    emergencyWithdrawFromShort(overrides?: Overrides): Promise<BigNumber>;

    "emergencyWithdrawFromShort()"(overrides?: Overrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "feeRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,string,string)"(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    instantWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "instantWithdrawalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPut(overrides?: CallOverrides): Promise<BigNumber>;

    "isPut()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    "manager()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdrawAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxWithdrawAmount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdrawableShares(overrides?: CallOverrides): Promise<BigNumber>;

    "maxWithdrawableShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(overrides?: Overrides): Promise<BigNumber>;

    "migrate()"(overrides?: Overrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextOption(overrides?: CallOverrides): Promise<BigNumber>;

    "nextOption()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<BigNumber>;

    "nextOptionReadyAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    replacementVault(overrides?: CallOverrides): Promise<BigNumber>;

    "replacementVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    rollToNextOption(overrides?: Overrides): Promise<BigNumber>;

    "rollToNextOption()"(overrides?: Overrides): Promise<BigNumber>;

    sellOptions(
      order: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        signer: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        sender: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        affiliate: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        signature: {
          signatory: string;
          validator: string;
          version: BytesLike;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellOptions((uint256,uint256,(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(address,address,bytes1,uint8,bytes32,bytes32)))"(
      order: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        signer: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        sender: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        affiliate: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        signature: {
          signatory: string;
          validator: string;
          version: BytesLike;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCap(newCap: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeRecipient(address)"(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setManager(newManager: string, overrides?: Overrides): Promise<BigNumber>;

    "setManager(address)"(
      newManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWithdrawalFee(
      newWithdrawalFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWithdrawalFee(uint256)"(
      newWithdrawalFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sunset(upgradeTo: string, overrides?: Overrides): Promise<BigNumber>;

    "sunset(address)"(
      upgradeTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(share: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      share: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAmountWithShares(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawAmountWithShares(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawETH(share: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdrawETH(uint256)"(
      share: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawToV1Vault(
      share: BigNumberish,
      vault: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToV1Vault(uint256,address)"(
      share: BigNumberish,
      vault: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MINIMUM_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINIMUM_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SWAP_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SWAP_CONTRACT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "USDC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountVaultBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "adapter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "asset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetAmountToShares(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assetAmountToShares(uint256)"(
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeShort(overrides?: Overrides): Promise<PopulatedTransaction>;

    "closeShort()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    commitAndClose(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
        paymentToken: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitAndClose((address,address,address,uint256,uint256,uint8,address))"(
      optionTerms: {
        underlying: string;
        strikeAsset: string;
        collateralAsset: string;
        expiry: BigNumberish;
        strikePrice: BigNumberish;
        optionType: BigNumberish;
        paymentToken: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentOption(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentOption()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentOptionExpiry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentOptionExpiry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "delay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositETH(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "depositETH()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    emergencyWithdrawFromShort(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdrawFromShort()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeRecipient()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,string,string)"(
      _owner: string,
      _feeRecipient: string,
      _initCap: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    instantWithdrawalFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "instantWithdrawalFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPut()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "manager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWithdrawAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxWithdrawAmount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdrawableShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxWithdrawableShares()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "migrate()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOption(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextOption()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOptionReadyAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextOptionReadyAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    replacementVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "replacementVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rollToNextOption(overrides?: Overrides): Promise<PopulatedTransaction>;

    "rollToNextOption()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sellOptions(
      order: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        signer: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        sender: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        affiliate: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        signature: {
          signatory: string;
          validator: string;
          version: BytesLike;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellOptions((uint256,uint256,(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(bytes4,address,address,uint256,uint256),(address,address,bytes1,uint8,bytes32,bytes32)))"(
      order: {
        nonce: BigNumberish;
        expiry: BigNumberish;
        signer: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        sender: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        affiliate: {
          kind: BytesLike;
          wallet: string;
          token: string;
          amount: BigNumberish;
          id: BigNumberish;
        };
        signature: {
          signatory: string;
          validator: string;
          version: BytesLike;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeRecipient(address)"(
      newFeeRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setManager(
      newManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setManager(address)"(
      newManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      newWithdrawalFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWithdrawalFee(uint256)"(
      newWithdrawalFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sunset(
      upgradeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sunset(address)"(
      upgradeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAmountWithShares(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawAmountWithShares(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawETH(uint256)"(
      share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawToV1Vault(
      share: BigNumberish,
      vault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToV1Vault(uint256,address)"(
      share: BigNumberish,
      vault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
